GIT 

from local

	git init

	git add . - Add your files

	git commit -m "Initial commit" - Commit the changes

	git remote add origin <repo link> - Add remote repository

	git branch -M main
	git push -u origin main - Push your code

	# Rename the local branch from master to main
	git branch -m master main

	# Delete master from remote if needed
	git push origin --delete master

	git pull origin main --rebase - pull the code from repo to avoide merge confilts

JavaScript

= vs == vs ===

= is assign operator
== check the value part only 
=== check the value and type 

Array 

Add -  conCat() - add 2 arrays - Doesn’t modify original.
	   push() - add at the end and return the number of items in the array
	   unshift() -  add at start - return the new length

Update -  array[0].name = newName
		  .map() - to update each elements

Delete - .splice(index, 1)	Removes 1 item at index. Changes original array.
		.filter()	Returns new array with only items that match condition.

Arrow Functions with Parameters

	const doubler = (item) => item * 2;
	
	function
	doubler(4);

Default
	const greeting = (name = "Anonymous") => "Hello " + name;
	console.log(greeting("John"));
	console.log(greeting());

Rest parameter

	function howMany(...args) {
	  return "You have passed " + args.length + " arguments.";
	}
	console.log(howMany(0, 1, 2));
	
Spread Operator - this will create a new array of the orginal array
	if you want to protect the orginal data then use this method

	const arr1 = ['JAN', 'FEB', 'MAR', 'APR', 'MAY'];
	let arr2;
	arr2 = [...arr1]; 
	console.log(arr2);
	
	o/p- ['JAN', 'FEB', 'MAR', 'APR', 'MAY']
	
Destructuring assignment  - make the code look clean

	const HIGH_TEMPERATURES = {
	  yesterday: 75,
	  today: 77,
	  tomorrow: 80
	};
	const { today,tomorrow } = HIGH_TEMPERATURES;
	
	we can assign new variables like this 
	
		const HIGH_TEMPERATURES = {
		  yesterday: 75,
		  today: 77,
		  tomorrow: 80
		};
		  
		const {today:highToday, tomorrow: highTomorrow} = HIGH_TEMPERATURES  
		( actually this is like highToday = HIGH_TEMPERATURES.today )
	
	Nested object
	
		const LOCAL_FORECAST = {
		  yesterday: { low: 61, high: 75 },
		  today: { low: 64, high: 77 },
		  tomorrow: { low: 68, high: 80 }
		};
	  
		const {today:{low:lowToday}} = LOCAL_FORECAST
		const {today:{high:highToday}} = LOCAL_FORECAST
	
	assign with array
	
		const [a, b,,, c] = [1, 2, 3, 4, 5, 6];
		console.log(a, b, c);
		
		o/p - 1,2,5
		
	Destructuring via rest elements
	
		const [a, b, ...arr] = [1, 2, 3, 4, 5, 7];
		console.log(a, b);
		console.log(arr);
	
	export

		const uppercaseString = (string) => {
		  return string.toUpperCase();
		}

		const lowercaseString = (string) => {
		  return string.toLowerCase()
		}

		export { uppercaseString, lowercaseString };
	import 
	
		import {uppercaseString, lowercaseString} from './string_functions.js'
		// Only change code above this line

		uppercaseString("hello");
		lowercaseString("WORLD!");

template literal		

	const person = {
	  name: "Zodiac Hasbro",
	  age: 56
	};

	const greeting = `Hello, my name is ${person.name}!
	I am ${person.age} years old.`;
	console.log(greeting);

	o/p - Hello, my name is Zodiac Hasbro! and I am 56 years old.

	uses backticks (`), not quotes (' or "), to wrap the string. Secondly, notice that the string is multi-line, 
	both in the code and the output. This saves inserting \n within strings. The ${variable} syntax used above is a placeholder.
	
Write Concise Object Literal Declarations Using Object Property Shorthand

	const getMousePosition = (x, y) => ({
	  x: x,
	  y: y
	}); 
	-->
	const getMousePosition = (x, y) => ({ x, y });

 Declarative Functions with ES6
 
 const person = {
  name: "Taylor",
  sayHello() {                                       - -->  before --> sayHello: function() {
    return `Hello! My name is ${this.name}.`;
  }
};



Backend/API Developer with strong Node.js + REST API + Apigee Gateway skills

✅ Day 1: Learn JavaScript Basics (ES6+)
let vs const
Arrow functions () => {}
Destructuring: const { name } = obj
map, filter, forEach, reduce

✅ Day 2: Learn Node.js + Express Basics
What is Node.js?

Node.js is a runtime environment that lets you run JavaScript on the backend (server side).
uses v8 engine same as chrome

	Browser (Client)
	   ↓    HTTP Request (GET/POST)
	Server (Node.js + Express)
	   ↑    HTTP Response (HTML/JSON/Text)
	Browser (Client)

Understanding the event loops - how teh async task will be done in node js

	Let’s say we are reading a file. In JavaScript, since it runs on a single thread, a synchronous file read will block the thread until it completes.
	But in Node.js, if we use fs.readFile() (asynchronous), the file read operation is sent to the background (handled by libuv).
	Node doesn’t wait for it to finish — it immediately continues running the remaining code.
	Once the background task completes, the callback is placed in the event loop queue, and it gets executed only when the call stack is clear.

setTimeout -> it was a async callback thing which will execute after the mention time 
setInterval -> it will keep on executing after mentioned time

    fs.writeFileSync('./sample/big.txt',`Hello there ${i}\n`, { flag : 'a' }) // flag will tell how to open the file we are opening in append mode

callback (async)

	A callback is a function passed as an argument to another function and is called after the first function completes(main function).
	
	Callbacks are the functions that the event loop runs once the associated event (timer, I/O, HTTP request) is ready.

	function fetchData(callback) {
	  setTimeout(() => {
		console.log("Data fetched");
		callback();
	  }, 1000);
	}

	fetchData(() => {
	  console.log("Callback executed");
	});

	When callbacks are nested deeply, it becomes messy — this is called callback hell.

Promises (async)
	A Promise is an object that represents the eventual completion or failure of an async operation. It has 3 states:

	pending

	Fulfilled → success (calls .then())

	Rejected → failure (calls .catch())

	function fetchData() {
	  return new Promise((resolve, reject) => {
		setTimeout(() => {
		  console.log("Data fetched");
		  resolve("Success");
		}, 1000);
	  });
	}

	fetchData()
	  .then((msg) => console.log("Then:", msg)) // run on resolve means if we mention resolve in promise the only we can get the data in .then
	  .catch((err) => console.error("Catch:", err)); // this code wont run even if i mentioned it here cuz i didnt use reject in promise so the promise will never enter the reject state to use .catch
	  
	output-
	Then: Success

async/await (async)
	async/await is built on top of Promises. It allows you to write asynchronous code like synchronous code, improving readability.

	You use:

	async before a function → it returns a Promise

	await inside an async function → waits for the Promise to resolve

	📦 Real-life Analogy:
	Like cooking a meal in steps:

	You wait for the water to boil,

	then you wait for the pasta to cook,

	then you serve it.

	Each step waits for the previous one.

	function doTask(task) {
	  return new Promise((resolve) => {
		setTimeout(() => {
		  console.log(`${task} done`);
		  resolve(task);
		}, 1000);
	  });
	}

	async function runTasks() {
	  const laundry = await doTask("Laundry");
	  const cooking = await doTask("Cooking");
	  const cleaning = await doTask("Cleaning");

	  console.log("All tasks finished:", laundry, cooking, cleaning);
	}

	runTasks();
	
For understanding

//Callback
setTimeout(()=>{
    console.log("one");
    setTimeout(()=>{
        console.log("Two");
        setTimeout(()=>{
            console.log("Three")
        })
    },1000)
},1000)

//promise
function Delayed(msg){
    return new Promise((resolve)=>{
        setTimeout(()=>{
            console.log(msg);
            resolve();
        },1000)
    })
}

Delayed("One")
    .then(()=> Delayed("Two"))
    .then(()=> Delayed("Three"))

//using async/await
async function delay() {
    await Delayed("One");
    await Delayed("Two");
    await Delayed("Three")
}

delay()
	
EventEmitter

	The EventEmitter is a built-in class in Node.js that allows objects to "emit" named events and register "listeners"
	 (functions) that run when those events happen.

	example -

		const EventEmitter = require('events');
		const myEmitter = new EventEmitter();

		myEmitter.on('ping', () => {
		  console.log('pong');
		});

		myEmitter.emit('ping');
		
		in this funtion when we wmit on ping it will check if there is anying on funtions if there then there executed it
		
	http module - In every communication we need to have res.end() which will signal the browser that the communication is over
	
Package.json
	npm inti
	
	npm install <package-name> - dependencies
	
	npm install <package-name> --save-dev - devDependencies

What is Express.js?

	It was bulid on top of http module in node js, it will make the task easy with.get(),.post() .. funtion and make the code look clean
	
	It allows you to handle HTTP requests, define routes, manage middleware, and much more — all with simple, clean code.
	
Static
	usecase - hosting website
	
	let say we have a website with html+css+js 
	
	in http module if we want to host this website we need to send all the file induvidually to the server (node js) as it will be expecting the file 
	
	example like lets say we need to send the html file as it was the main but inside the file we expecting css and js files also so the server will
	expect those files also 
	
	so in http module we need to send files as we sent for html file which will make code repeat and the code will be messy 
	
	when we come for express even here the server will expect the css and js files but rather then sending induvidually file we have a method called
	.use(express.static('folder name') - static assets 
	
	we will inculde all the file which are requried here so it will take automaticaally so rather then sending one one file 
	
	Note :If we didnt handle "/" in app.js... Express looks inside the web folder.If it finds a file named index.html, it automatically serves it
	as the default file for /.

API(REST API / JSON API) vs SSR(Server-Side Rendering)
	API sends raw JSON data from server to client — the client (like React) builds the UI.
	SSR sends fully rendered HTML templates from the server — the UI is built on the server itself.
	
	/api/user/:id?name=sai
	
	req.path =  '/api/user' - path
	req.query = '?name=sai' - query
	req.param = ':id' = param
	
Route Parameters 

	this are dynamic parameter which we will include in path.
	
	example -
	app.get('/api/products/:productId', (req,res)=>{
		const id = req.params.productId
		const number = products.find((product)=> product.id === Number(id))
		// const {id, name, image} = number
		if(number){
			return res.json(number)
		}else{
			return res.status(404).json({code:404,error:"Resource not found"})
		}
	})
	
	In this code we are check the product id dynamic
	
MiddleWare

- When a request (req) comes from the client, Express will pass it through any middleware functions you have set up in the order they appear.

- Each middleware function gets three arguments:
	(req, res, next)
	
	Inside the middleware, you can do things like:
	-Log info (like a logger middleware)
	-Modify req or res
	-Authenticate the user
	-Parse data, etc.

- After your middleware finishes, you either:
	Call next() — this passes control to the next middleware or route handler in the stack
	Or send a response back with res.send(), res.json(), res.end(), etc., which ends the request-response cycle (no need to call next() then).
	
Pre-made middle ware funtion 

- Ready-made logging middleware function that you can directly plug into your app using app.use().
example
app.use(morgan('tiny))	

Error handling middle ware 

	High-Order Function (HOF) - basically we can create a separate middle ware for error handling it was the best way

	so we are separating the business login and error handler in a seaprated file so the code looks clean 

	Flow
		Client Request
			 |
			 v
		Route (e.g., GET /tasks/:id)
			 |
			 v
		Controller (wrapped in asyncWrapper)
			 |
			 |-- If OK --> Send JSON response
			 |
			 |-- If Error --> next(error)
								  |
								  v
					 Error Handler Middleware
								  |
								  v
			- If error instanceof customError --> Use custom msg + statusCode      -> customError is the class we extented from error class
			- Else (system error) --> Send generic 500 msg
			
Note: How to know this is error middleware or normal middleware 

in express - (err,req,res,next)  - this is error middle ware
			 (req,res,next) - normal middleware
			 
express-async-errors is a popular npm package that makes handling async errors in Express simpler — you won’t even need to write an asyncWrapper manually.

Method -  GET, POST,PUT, DELETE

	parse URL-encoded form data (typically from HTML forms submitted with application/x-www-form-urlencoded content type) and make it available on req.body.

	app.use(express.urlencoded({extended : false})

	if we want to parse json then we can use 

	app.use(express.json())

✅ Day 3: Build a Simple Local API

✅ You’ll understand:

Route handling

Using Postman to test endpoints

Router

	In Express.js, a router is a way to group and organize related routes (URLs + handlers) together. It helps to modularize your application.

	we can set up MVC with this 
		
		//app.js
		const peopleRouter = require('./routes/people')

		app.use('/api/people', peopleRouter) - /api/people is the base path.

		// routes/people.js
		const express = require('express')
		const router = express.Router()

		router.get('/', (req, res) => {
		  res.send('Get all people')
		})

		router.post('/:id', (req, res) => {
		  res.send('Add a person')
		})

		module.exports = router
		
	peopleRouter contains all sub-routes like:

		/ → for GET all

		/:id → for PUT/DELETE/GET by ID

		/add → for POST maybe
		
	if we hit this reqs

		GET /api/people
		POST /api/people
		PUT /api/people/1
		DELETE /api/people/1

	All gets routed through peopleRouter.
	
✅ Day 4: Learn MongoDB + Mongoose
What is MongoDB?

How to use MongoDB Atlas

How to connect to MongoDB from Node.js

Define schemas with Mongoose


✅ Day 5–6: Combine Express + MongoDB
Save data to MongoDB using a POST API

Retrieve data using a GET API

Practice using Postman

MangoDB

	MongoDB
	└── Database (e.g., "school")
		 └── Collection (e.g., "students")
			  └── Document (e.g., { name: "Sairam", age: 25 })

	NoSql, NON relational database which will be in json format 
	
	_id field: Auto-generated unique identifier (ObjectId) for every document.

	BSON: MongoDB stores data in BSON (Binary JSON), not pure JSON (supports additional types like Date, ObjectId).

	Database 
	collections - are like tables in sql
	documents -  like rows in sql

	For this project we are using atlas mangodb which was like mango was hosted in cloud we aare just using from there 
	it was a UI based mangodb 

	1st things to do 
	Network Access: Add 0.0.0.0/0 to allow all IPs during dev (remove later for security).
	Database Users: Create specific users with least privileges.
	Connection String: mongodb+srv://<user>:<pass>@cluster.mongodb.net/<dbName>

	In code we are going to use mangooes 

Mongoose -
	Mongoose is an ODM (Object Data Modeling) library for MongoDB and Node.js.
	it will make the code clear and simple to understand has lot of bulid in funtion which makes the task easy 

	Connection to db 

	dotenv - it was a package where we can use for access the env variables 

	in URL WE CAN MENTION THE DATABASE NAME if it was not there mangodb will create a database in that name or else it will connect to that db

FLOW 

	.env          ← store MONGO_URI
	 |
	mongoose.connect()   ← connection using dotenv
	 |
	Schema definition    ← define data structure (like SQL table schema)
	 |
	Model creation       ← create a model from schema
	 |
	CRUD operations      ← use model to interact with the collection

so if we created a schema and want to post the data only the ones in the schema will be passed/posted into the database remining will be ignored.

example -

	{name:String} - let say this is the schema 
	
	if we want to post some data and choose this schema and send 
	
	{
		"name":"sa"
		"status":true
	}
	
	only name will be sent to the database statsu will be ignoredd
	
Comman Commands
Connection
	mongoose.connect('mongodb://localhost:27017/mydb')

Schema & Model
	const schema = new mongoose.Schema({ name: String });
	const Model = mongoose.model('ModelName', schema);

Validation
	name: { type: String, required: true, trim: true }
	email: { type: String, unique: true, match: /@gmail\.com$/ }
	default → set default values for fields.

Create
	await Model.create({ name: 'Sairam' });
Read
	await Model.find();                      // Get all
	await Model.find({ name: 'Sairam' });    // Get one
	await Model.findOne({ name: 'Sairam' }); // Get one
	await Model.findById('64ea56f...');      // Get by _id

Update
	await Model.updateOne({ _id }, { $set: { name: 'Updated' } });
	await Model.findByIdAndUpdate(id, { age: 26 }, { new: true }); // return updated doc

Delete
	await Model.deleteOne({ _id });
	await Model.findByIdAndDelete(id); -  delete based on id
	await Model.findOneAndDelete({name:"sairam"}) - delete based on any condition

Get the number of documents in the database
	await model.countDocuments();
	
	
process.exit(0) -  we will exit the process/function
process.exit(1) -  we will exit with error


Pagination 

	splits large data sets into smaller chunks (pages).
	Improves performance and reduces bandwidth.
	Commonly used with limit and skip in MongoDB/Mongoose.
	
	means like lets say igave limit as 10 per page and we have 40
	
	as data is 40 we have 4 pages
	
	skip = (page - 1) * limit;
	
	i wanna see 2 page so i gave page = 2 and limit =10
	
	skip = (2-1)*10 = 1-1*10 = 10 
	
	.skip(10).limit(10) - as per page is 10 only i will get 2nd page data


Chaining = calling multiple methods on the same object sequentially in one line

javascript -  

	const arr = [
		  {
			"name": "accent chair",
			"price": 25,
			"company": "marcos",
			"rating": 4
		  },
		  {
			"name": "albany sectional",
			"price": 109,
			"company": "liddy",
			"rating": 5
		  },
		  {
			"name": "albany table",
			"price": 309,
			"company": "liddy",
			"rating": 4.9
		  },
	]
	
	
	arr.filter((rate)=>rate.rating > 4).map((user)=> user.name).sort()


Mongoose: Model.find().where('age').gt(18).sort('name')

✅ Day 7: Learn Basic JWT Auth
What is JWT?

Register/Login route

Sign and verify JWT tokens

Use middleware to protect routes

How JWT Authentication Works (Simplified Flow)
	User Login
		User sends username & password to the server.

	Server Issues JWT
		Server verifies credentials.
		If valid, server creates a JWT (with user info & expiration time).
		Server signs the token with its secret key and sends it to the user.

	Client Stores JWT
		The client (browser/app) stores the token (commonly in localStorage, sessionStorage, or HttpOnly cookie).

	Accessing Protected Resources
		When the client wants to request protected data, it includes the token in the request header:

			Authorization: Bearer <JWT_TOKEN>
			
	Server Verifies Token
		Server extracts the token from the header.
		Verifies the signature using the secret key:
			If valid and not expired → request is authorized → send data.
			If invalid or expired → respond with 401 Unauthorized.

